{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","test/serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.857da817.chunk.js","sourcesContent":["// rfce: react funcitonal component\nimport React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './styles/InfoBox.css';\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n\n  return (\n    <Card onClick={props.onClick}\n    className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\n      <CardContent className='infobox-container'>\n        {/* Title i.e. Coronavirus cases */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        {/* +120k Number of cases */}\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--blue\"}`}>{cases}</h2>\n\n        {/* +1.2M Total */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\n // one line\n  // return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#5971db\",\n    rgb: \"rgb(89, 113, 219)\",\n    half_op: \"rgba(89, 113, 219, 1)\",\n    // hex: \"#7dd71d\",\n    // rgb: \"rgb(125, 215, 29)\",\n    // half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport './styles/Map.css';\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React from 'react';\nimport numeral from \"numeral\";\nimport './styles/Table.css';\n\nfunction Table({ countries }) {\n\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <string>{numeral(cases).format(\"0,0\")}</string>\n            </td>\n        </tr>\n      ))}\n    </div>\n\n  );\n}\n\nexport default Table;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from '@material-ui/core';\nimport './styles/App.css';\nimport InfoBox from './InfoBox.js';\nimport Map from './Map.js';\nimport Table from './Table.js';\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from './LineGraph.js';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  // STATE - short term memory / how to write a variable in react\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.800746, lng: -40.4796 })  // center of the world map\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\")\n\n\n  // useEffect : componentDidMount / when app.js loaded, render it once\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, []);\n\n  useEffect(() => {\n    // getting countries api info and organize data and set to countries\n    // async -> send a request, wait for it.do something with info\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('countries data >>>', data[0])\n        console.log('data[0].country >>>', data[0].country)\n        const countries = data.map((country) => (\n          {\n            name: country.country,  // United States, United Kingdom\n            value: country.countryInfo.iso2 // US, UK\n          }));\n\n          setCountries(countries);\n          // using util helper fn to sort\n          const sortedData = sortData(data)\n          setMapCountries(data);\n          setTableData(sortedData);\n\n      });\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide'\n    ? \"https://disease.sh/v3/covid-19/all\"\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  return (\n\n    <div className=\"app\">\n        {/* // Big Left Container */}\n      <div className=\"app__left\">\n\n        {/* Header */}\n      <div className=\"app__header\">\n        <h1 className=\"title\"> Coronavirus Tracker Dashboard</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select className='selected' variant=\"outlined\" value={country} onChange={onCountryChange}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            { countries.map((country) => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))}\n\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className=\"app__stats\">\n        <InfoBox\n        isRed\n        active={casesType === \"cases\"}\n        onClick={e => setCasesType('cases')}\n          title=\"Coronavirus Cases\"\n          cases={prettyPrintStat(countryInfo.todayCases)}\n          total={prettyPrintStat(countryInfo.cases)} />\n        <InfoBox\n        active={casesType === \"recovered\"}\n        onClick={e => setCasesType('recovered')}\n          title=\"Recovered\"\n          cases={prettyPrintStat(countryInfo.todayRecovered)}\n          total={prettyPrintStat(countryInfo.recovered)}/>\n        <InfoBox\n        isRed\n        active={casesType === \"deaths\"}\n        onClick={e => setCasesType('deaths')}\n          title=\"Deaths\"\n          cases={prettyPrintStat(countryInfo.todayDeaths)}\n          total={prettyPrintStat(countryInfo.deaths)}/>\n      </div>\n\n         <Map\n         casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}/>\n      </div>\n\n      {/* // Big Right Container */}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n            {/* Table */}\n          <Table countries={tableData}/>\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n           {/* Graph */}\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './test/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}